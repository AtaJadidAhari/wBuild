.. _features:

========
Features
========

Overview
--------

We all know that doing data analysis day-to-day could easily turn into routine work - so wBuild exactly to reduce the
amount of time you spend to :ref:`publish the output of your script <publishing-the-output>`, `declare the needed input files`,
`run Py code as a part of work pipeline`, `use placeholders to structure your Snakemake job`,
`map your project's scripts together` and many more.

You are also welcome to find all of the `examples` showing the listed features :ref:`running the demo project <running-demo>`.

Command-line interface
----------------------
Basically, command-line interface of wBuild is responsible `only` for code-generation. There are three instructions, also shortly
documented under :bash:`wbuild -h`

:bash:`wbuild demo`
    Run :ref:`demo project <running-demo>`.

.. _wbuild-init:

:bash:`wbuild init`
    Initialize `wBuild` in an already existing project. This command prepares all important wrappers and files for Snakemake.

:bash:`wbuild update`
    To be called on an already initialized project. Updates :bash:`.wbuild` directory to the newest version using
    :ref:`installed <install-wbuild>` Python :code:`wbuild` package.

Parsing YAML headers
--------------------
In following, we present a basic YAML header:

.. code-block:: R

    #'---
    #' title: Basic Input Demo
    #' author: Leonhard Wachutka
    #' wb:
    #'  input:
    #'  - iris: "Data/{wbP}/iris.RDS"
    #'  output:
    #'  - pca: " {wbPD_P}/pca.RDS"
    #' type: script
    #'---

wBuild requires users to define information of the scripts in RMarkdown YAML-format header. Besides standard RMarkdown header,
wBuild reads `rules for Snakemake`_ from wb block. Important tags for this block are input and output. wBuild reads inputs and outputs,
and then builds dependence graph. By default, the script will be excuted by taking the inputs and produce outputs (if any),
and :ref:`render the script into an HTML format <publishing-the-output>`.

Technically speaking, there are generally two sets of tags that could be used in this YAML header: wBuild-own and Snakemake tags.

wBuild-own YAML tags
~~~~~~~~~~~~~~~~~~~~

.. TODO complete the wb tags list

Snakemake tags
~~~~~~~~~~~~~~

One can also state Snakemake options in "wb" block of the YAML header and even `refer to them in this R script later` using
:code:`snakemake@`. Here, we mark that we will use 10 threads when executing this script:

#' wb:
#'  input:
#'  - iris: "Data/iris_downloaded.data"
#'  threads: 10

The specified thread variable can then be refered to by name in our R script: :code:`snakemake@threads`

.. _rules for Snakemake: http://snakemake.readthedocs.io/en/stable/snakefiles/rules.html

.. _publishing-the-output:

Publishing the output
---------------------

Snakemake renders your project, including script text and their outputs, to a nice viewable *structure of HTML files*. You can
specify the output path by putting/changing the :ref:`htmlOutputPath <html-output-path>` value inside the :ref:`wbuild.yaml <configuration-file>` file found
in the root directory of your wBuild-initiated project. Your HTML gets output to :code:`Output/html` by default.

.. _configuration-file:

Configuration file
------------------

:code:`wbuild.yaml` file that is found in the root directory of the project stands for the configuration file of wBuild.
|**IMPORTANT**: Please, do not remove any key-value pairs from it or move this file *unless you know what you are doing*.
In this file you can adjust various properties of wBuild workflow:

.. _html-output-path:

htmlOutputPath
    This value specifies the `relative` path where your HTML output will land. *More precisely*, it is a `prefix to output file`
    of any Snakemake rule that is generated by wBuild. Default is :code:`Output/html`.

Placeholders
------------

Placeholders provide the ability to refer to your current position in your system's filepath with a pair of letters instead
of absolute, relative paths. It's best shown in an example:
.. code-block:: md

    #' wb:
    #'  input:
    #'  - iris: "Data/{wbP}/iris.RDS"
    #'  output:
    #'  - pca: " {wbPD_P}/pca.RDS"

Here, we use :code:`wbP` for the name of the current project (say, Analysis01) and :code:`wbPD_P` for the name of the
output directory for processed data slash project name, say :code:`Output/ProcessedData/Analysis01`.

Here is the conscise list of the placeholders:

wbPD
    [output directory for processed data], e.g. `Output/ProcessedData`

wbP
    [current project], e.g.  `Analysis1`

wbPP
    [subfolder name], e.g. `020_InputOutput`

wbPD_P
    [output directory for processed data]/[current project], e.g. `Output/ProcessedData/Analysis1`

wbPD_PP
    [output directory for processed data]/[current project]/[subfolder name], e.g. `Output/ProcessedData/Analysis1/020_InputOutput`


.. _script-mapping:

Script mapping
--------------
